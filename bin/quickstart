#!/bin/bash

#
# Quickstart
#
#   Quickly set up an environment where you can experiment with
#   the drush config-merge commands.
#
# Purpose:
#
#   This script wil install all of the components needed to use
#   the `drush config-merge` command, and will also create a
#   pair of sites for you to work with.
#
#   The two sites can either both be local, or, alternately, one
#   can be hosted on Pantheon, in which case a local clone of the
#   specified Pantheon site will be created.
#
#   In either case, the sites will share a central git repository,
#   and the database of the cloned site will be created from a copy
#   of the other site -- both necessary preconditions for using
#   Drush config-merge.
#
# Usage to make a local dev / test environment:
#
#   $ ./bin/quickstart --create-local-sites foo
#
#   This will create @local.foo.dev and @local.foo.test.
#
# Usage to make a local clone of a Pantheon site:
#
#   $ ./bin/quickstart sitename [install-path]
#
#   This will create @local.sitename from an existing Pantheon
#   site @pantheon.sitename.dev.
#
# Notes:
#
#   This script is idempotent; you may run it multiple times with
#   no ill effects.  No action will be taken for components that
#   you have already installed before running this script.
#
#   Use --revert to erase the "working" site, and make it once again
#   a fresh copy of the dev site.  Using this option obviously removes
#   the idempotency of this script.
#

# Default argument values
PANTHEON_SITE=
SITE_ENV='dev'
BASE_DIR=
PORT=8778

# Default option values
DEBUG=false
VERBOSE=false
TRACE=false
FORCE=false
MYSQL_USER=root
MYSQL_PASSWORD=

# Initial state variables
COPY_DATABASE=false
IMPORT_CONFIGURATION=false
MODIFIED_BASHRC=false
DEBUGMSG=false
VERBOSEMSG=false

MSG='echo # '
ERROR='echo '

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  L O C A L   S C R I P T   F U N C T I O N S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Keep track of things the script did.
#
# Usage:
#
#   accomplished "Something the script did"
#
declare -a ACCOMPLISHMENTS
function accomplished() {
  ACCOMPLISHMENTS=("${ACCOMPLISHMENTS[@]}" "$1")
}

#
# Exit with a message if the previous function returned an error.
#
# Usage:
#
#   aborterr "Description of what went wrong"
#
function aborterr() {
  if [ $? != 0 ]
  then
    echo "$1" >&2
    exit 1
  fi
}

#
# Check the result of the last operation, and either call accomplished or aborterr
#
# Usage:
#
#   check "Something the script did" "Message to display if it did not work"
#
function check() {
  aborterr "$2"
  accomplished "$1"
}

#
# Create a local alias for the specified site in ~/.drush/local.aliases.drushrc.php
#
# Usage:
#
#   create_local_alias "ALIASNAME" /path/to/root uri
#
function create_local_alias() {
  local SITE="$1"
  local ROOT="$2"
  local URI="$3"

  # Create the local.aliases.drushrc.php file if it does not already exist.
  local LOCAL_ALIAS_FILE="$HOME/.drush/local.aliases.drushrc.php"
  if [ ! -f  "$LOCAL_ALIAS_FILE" ]
  then
    echo "<?php" > "$LOCAL_ALIAS_FILE"
  fi

  # Only add an alias if there isn't already an entry for it in the file.
  grep -q "aliases\[\"$SITE\"\]" "$LOCAL_ALIAS_FILE"
  if [ "$?" != "0" ] ; then

    # Append our alias to the end of our local aliases file.
    cat << __EOF__ >> "$LOCAL_ALIAS_FILE"

\$aliases["$SITE"] = array(
  'root' => '$ROOT',
  'uri' => '$URI',
);
__EOF__
  check "Created an alias for '$SITE'" "Could not create an alias for '$SITE' in '$LOCAL_ALIAS_FILE'."
  fi
}

#
# Clone the git repository for the specified site
#
# Usage:
#
#   clone_repository "Sitename" repository /path/to/clone/to
#
function clone_repository() {
  local SITE="$1"
  local REPO="$2"
  local LOCAL_ROOT="$3"

  DEPTH_MSG=
  DEPTH_ARG=
  echo "$REPO" | grep -q '://'
  if [ "$?" == "0" ] ; then
    DEPTH_MSG=" shallow"
    DEPTH_ARG="--depth 1"
  fi

  # If the site was already cloned, just update it.
  if [ -d "$LOCAL_ROOT" ]
  then
    $MSG "Update code from git repository"
    git pull origin master
    aborterr "Could not pull the master branch from the git remote origin."
  else
    $MSG "Making a$DEPTH_MSG clone of the git repository $REPO"
    # Make sure that the parent directory of $LOCAL_ROOT exists
    mkdir -p "$(dirname $LOCAL_ROOT)"
    cd "$(dirname $LOCAL_ROOT)"
    git clone $DEPTH_ARG "$REPO" $(basename $LOCAL_ROOT)
    check "Cloned the git repository for the site '$SITE'" "Could not clone the git repository '$REPO' to $LOCAL_ROOT"
  fi
}

#
# Create a gitignore file for the specified Drupal site
#
# Usage:
#
#   create_gitignore /path/to/drupalroot
#
function create_gitignore() {
  local LOCAL_ROOT="$1"

  if [ ! -f "$LOCAL_ROOT/.gitignore" ]
  then
    $MSG "Set up .gitignore file"
    cp "$LOCAL_ROOT/example.gitignore" "$LOCAL_ROOT/.gitignore"
    aborterr "Could not create .gitignore file."

    # If there is already a git repository here, then commit the
    # .gitignore file.  Otherwise, we presume it will become part
    # of the initial commit.
    if [ -d "$LOCAL_ROOT/.git" ]
    then
      git add "$LOCAL_ROOT/.gitignore"
      git commit -m "Create .gitignore file."
      aborterr "Could not commit .gitignore file."

    else
      # Ignore the drushrc.php file created by drush qd
      if [ -f "$LOCAL_ROOT/drush/drushrc.php" ]
      then
        echo "drush/drushrc.php" >> "$LOCAL_ROOT/.gitignore"
      fi
    fi
  fi
}

function configure_settings_php() {
  local SITE="$1"
  local LOCAL_ROOT="$2"
  local LOCAL_SITE_ALIAS="$3"

  if [ -z "$LOCAL_SITE_ALIAS" ]
  then
    LOCAL_SITE_ALIAS="@local.$SITE"
  fi

  grep -q settings.local.php "$LOCAL_ROOT/sites/default/settings.php"
  if [ "$?" != "0" ] ; then
    $MSG "Include settings.local.php from settings.php"
    echo 'if (file_exists(__DIR__ . "/settings.local.php")) { include __DIR__ . "/settings.local.php"; }' >> "$LOCAL_ROOT/sites/default/settings.php"
    git add "$LOCAL_ROOT/sites/default/settings.php"
    git commit -m "Add an include local settings line in settings.php"
    aborterr "Could not add an include for settings.local.php to settings.php."
    git push
    check "Could not push modified settings.php back to the central git repository."
  fi

  if [ ! -f "$LOCAL_ROOT/sites/default/settings.local.php" ]
  then

  local HASH_SALT="$(base64 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 75 | head -n 1)"
  $DEBUGMSG "Hash_salt is $HASH_SALT"

  local LOCAL_SITE_DB="$(echo ${SITE}localdb | sed -e 's/[^a-zA-Z0-9]//g')"
  $VERBOSEMSG "Local site database is $LOCAL_SITE_DB"

  $MSG "Create settings.local.php"

cat << __EOF__ > "$LOCAL_ROOT/sites/default/settings.local.php"
<?php

\$config['system.site']['name'] = 'Local $SITE site';

\$settings['hash_salt'] = '$HASH_SALT';

\$databases['default']['default'] = array (
  'database' => '${LOCAL_SITE_DB}',
  'username' => '$MYSQL_USER',
  'password' => '$MYSQL_PASSWORD',
  'prefix' => '',
  'host' => 'localhost',
  'port' => '',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
);

\$config_directories = array(
  CONFIG_ACTIVE_DIRECTORY => 'sites/default/files/config/active',
  CONFIG_STAGING_DIRECTORY => 'sites/default/config',
);
__EOF__

    # Create the local database at the same time that we
    # set up the settings.php file.
    $MSG Create database for local copy of $LOCAL_SITE_ALIAS
    drush $LOCAL_SITE_ALIAS sql-create
    COPY_DATABASE=true

  fi
  check "Created a local settings file for the copy of the site '$SITE'" "Could not create settings.local.php file."
}

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  P A R S E   C O M M A N D   L I N E   A R G S   A N D   O P T I O N S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

while [ $# -gt 0 ] ; do

  option="$1"
  shift

  case "$option" in
    -v|--verbose)
      VERBOSE=true
      VERBOSEMSG='echo # '
      ;;

    -d|--debug)
      DEBUG=true
      DEBUGMSG='echo ### '
      VERBOSE=true
      VERBOSEMSG='echo # '
      ;;

    -q|--quiet)
      MSG=false
      ;;

    --trace)
      TRACE=true
      ;;

    --force)
      FORCE=true
      ;;

    --user)
      MYSQL_USER=$1
      shift
      ;;

    --pw)
      MYSQL_PASSWORD=$1
      shift
      ;;

    --port)
      PORT=8778
      ;;

    --revert)
      COPY_DATABASE=true
      IMPORT_CONFIGURATION=true
      ;;

    -c|--create-local-sites)
      LOCAL_SITES_BASENAME="$1"
      shift
      ;;

    --pantheon)
      PANTHEON_SITE="$1"
      shift
      ;;

    --dir)
      BASE_DIR="$1"
      shift
      ;;

    --env)
      SITE_ENV="$1"
      shift
      ;;

    -*)
      $ERROR "Unknown option $option" >&2
      exit 1
      ;;

    *)
      if [ -z "$PANTHEON_SITE" ]
      then
        PANTHEON_SITE="$option"
      elif [ -z "$BASE_DIR" ]
      then
        BASE_DIR="$option"
      else
        $ERROR "Too many arguments" >&2
        exit 1
      fi
      ;;
  esac
done

# Note whether we have needed apps
HAS_KDIFF3="$(which kdiff3)"
HAS_PHP="$(which php)"
HAS_COMPOSER="$(which composer)"
HAS_DRUSH="$(which drush)"
HAS_TERMINUS="$(which terminus)"

# Prohibit execution as root user
if [ "$(whoami)" == "root" ]
then
  $ERROR "Do not run $0 as root." >&2
  exit 1
fi

# Exit if php is not installed
if [ -z "$HAS_PHP" ]
then
  $ERROR "Install php before running this script." >&2
  exit 1
fi

# Create an initial bashrc if one does not already exist.
if [ ! -f "$HOME/.bashrc" ] ; then
  echo "# Initial .bashrc created by $0." > "$HOME/.bashrc"
fi

# Set a default BASE_DIR if one was not provided
if [ -z "$BASE_DIR" ]
then
  BASE_DIR="$HOME/local/drupal"
fi

# Turn on bash debugging if --trace is specified
if $TRACE
then
  set -x
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  O . S .  -  S P E C I F I C   A C T I O N S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check the OS
OS="$(uname -s)"

# Do OS-specific operations.
case "$OS" in
  Darwin)
    if [ -z "$HAS_KDIFF3" ]
    then
      brew install Caskroom/cask/kdiff3
      check "Installed kdiff3" "Could not install kdiff3 via 'brew install'."
    else
      $VERBOSEMSG "kdiff3 already installed."
    fi
    ;;

  Linux)
    if [ -z "$HAS_KDIFF3" ]
    then
      echo "$0 would like to install kdiff3"
      sudo apt-get install kdiff3
      check "Installed kdiff3" "Could not install kdiff3 via 'apt-get install'."
    else
      $VERBOSEMSG "kdiff3 already installed."
    fi
    ;;

  *)
    $ERROR "$OS is not supported by $0" >&2
    exit 1
    ;;
esac


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   C O M P O S E R
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# https://getcomposer.org/doc/00-intro.md#system-requirements

if [ -z "$HAS_COMPOSER" ]
then
  # Download composer and place it in $HOME/bin
  curl -sS https://getcomposer.org/installer | php
  check "Installed Composer" "Could not install Composer."
  mkdir -p "$HOME/bin"
  mv composer.phar "$HOME/bin/composer"
  aborterr "Could not move composer to ~/bin"

  # If $HOME/bin is not already in the user's $PATH, then add it to ~/.bashrc
  if [ -z "$(which composer)" ] ; then
    sed -i '1i export PATH=$PATH:$HOME/bin' ~/.bashrc
    aborterr "Could not add PATH modification to .bashrc."
    export PATH="$PATH:$HOME/bin"
    MODIFIED_BASHRC=true
  fi
else
  $VERBOSEMSG "Composer already installed."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   P A T H   V A R I A B L E S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Make sure that $HOME/bin is on our PATH

if [ "$PATH" == "${PATH/$HOME/}" ] ; then
  export PATH="$HOME/bin:$PATH"
fi

# Insure that the vendor/bin directory is on our PATH as well

if [ "$PATH" == "${PATH/.composer/}" ] ; then
  export PATH="$HOME/.composer/vendor/bin:$PATH"
fi

# Add $HOME/bin and $HOME/.composer/vendor/bin permanently to our $PATH
# in our .bashrc
chkbashrc="$(grep 'composer/vendor/bin' "$HOME/.bashrc")"
if [ "X$chkbashrc" = "X" ] ; then
  sed -e '/^ *$/,$ d' "$HOME/.bashrc" > "$HOME/.bashrc-head"
  sed -e '1,/^ *$/ d' "$HOME/.bashrc" > "$HOME/.bashrc-body"
  cp "$HOME/.bashrc-head" "$HOME/.bashrc"
cat <<- __END__ >> "$HOME/.bashrc"
[ "\$PATH" == "\${PATH/\$HOME/}" ] && export PATH="\$HOME/bin:\$PATH"
[ "\$PATH" == "\${PATH/.composer/}" ] && export PATH="\$HOME/.composer/vendor/bin:\$PATH"
__END__
  cat "$HOME/.bashrc-body" >> "$HOME/.bashrc"
  rm "$HOME/.bashrc-head"
  rm "$HOME/.bashrc-body"
  MODIFIED_BASHRC=true
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   D R U S H
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ -n "$HAS_DRUSH" ]
then
  DRUSH_VERSION="$(drush version --pipe)"
  echo $DRUSH_VERSION | grep '^8' > /dev/null
  if [ "$?" != "0" ]
  then
    $ERROR "Please upgrade to Drush 8 before running this script." >&2
    exit 1
  else
    $VERBOSEMSG "Drush 8 already installed."
  fi
else
  $MSG "Installing Drush"

  # Install Drush via composer
  composer global require drush/drush:dev-master --prefer-source
  check "Installed Drush" "Could not install Drush via 'composer global require'."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   D R U S H   C O N F I G U R E    M E R G E
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check to see if we already have the config-merge command
drush help config-merge > /dev/null 2>&1
if [ "$?" != "0" ]
then
  (
    cd "$HOME/.drush"
    composer global require "drush/config-extra"
    drush cc drush
  )
fi


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  C O N F I G U R E   D R U S H
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Create a ~/.drush/drushrc.php file if it does not already exist.
mkdir -p "$HOME/.drush"
aborterr "Could not create ~/.drush folder."
DRUSH_CONFIG_FILE="$HOME/.drush/drushrc.php"
if [ ! -f  "$DRUSH_CONFIG_FILE" ]
then
  echo "<?php" > "$DRUSH_CONFIG_FILE"
fi

# Make kdiff3 the default merge tool for config-merge
grep -q "kdiff3" "$DRUSH_CONFIG_FILE"
if [ "$?" != "0" ] ; then

  cat << __EOF__ >> "$DRUSH_CONFIG_FILE"

# Set the default merge tool to use in the config-merge command.
\$command_specific['config-merge']['tool'] = 'kdiff3';
__EOF__
fi
aborterr "Could not create the Drush configuration file in $DRUSH_CONFIG_FILE."

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   T E R M I N U S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ -z "$HAS_TERMINUS" ]
then
  $MSG "Installing Terminus"

  curl https://github.com/pantheon-systems/cli/releases/download/0.5.5/terminus.phar -L -o $HOME/bin/terminus
  check "Installed Terminus" "Could not download Terminus."
  chmod +x $HOME/bin/terminus
else
  $VERBOSEMSG "Terminus already installed."
fi


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  C H E C K   E N V I R O N M E N T
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check to see if the Mysql user and password are correct.

MYSQL_EXTRA_FILE="$HOME/.mysql/mysqlextra"
mkdir -p $(dirname $MYSQL_EXTRA_FILE)

cat << __EOT__ > "$MYSQL_EXTRA_FILE"
#This file was written by the quickstart script
[client]
user="$MYSQL_USER"
password="$MYSQL_PASSWORD"
__EOT__
chmod 700 "$MYSQL_EXTRA_FILE"

mysql --defaults-extra-file="$MYSQL_EXTRA_FILE" -e 'select 1;' > /dev/null 2>&1
if [ "$?" != "0" ] ; then
  $ERROR "Mysql credentials incorrect.  Please run again with --user and --pw." >&2
  exit 1
fi

$VERBOSEMSG "Mysql credentials are okay."


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   U P   A   P A I R   O F   T E S T    D R U P A L   S I T E S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Local site creation.
#
if [ -n "$LOCAL_SITES_BASENAME" ]
then

  LOCAL_DEV="$LOCAL_SITES_BASENAME.dev"
  LOCAL_TEST="$LOCAL_SITES_BASENAME.test"

  LOCAL_DEV_ROOT="$BASE_DIR/$LOCAL_DEV"
  $VERBOSEMSG "Local root for dev site is $LOCAL_DEV_ROOT"

  LOCAL_TEST_ROOT="$BASE_DIR/$LOCAL_TEST"
  $VERBOSEMSG "Local root for test site is $LOCAL_TEST_ROOT"

  DEV_SITE_ALIAS="@$LOCAL_DEV"
  $VERBOSEMSG "Dev site alias is $DEV_SITE_ALIAS"

  TEST_SITE_ALIAS="@$LOCAL_TEST"
  $VERBOSEMSG "Test site alias is $TEST_SITE_ALIAS"

  DEV_PORT=9966
  TEST_PORT=9999


  # 1. Make an alias for both local sites.

  create_local_alias "$LOCAL_DEV" "$LOCAL_DEV_ROOT" "localhost:$DEV_PORT"
  create_local_alias "$LOCAL_TEST" "$LOCAL_TEST_ROOT" "localhost:$TEST_PORT"

  # Install a Drupal 8 test site with drush core-quick-drupal
  # (We do this in a different order than in the README so that we can use the alias we created above with the qd command)

  if [ ! -d "$LOCAL_TEST_ROOT" ]
  then

    $MSG "Create a test site $TEST_SITE_ALIAS with drush core-quick-drupal"

    TEST_SITE_DB="$(echo ${LOCAL_SITES_BASENAME}testdb | sed -e 's/[^a-zA-Z0-9]//g')"
    $VERBOSEMSG "Test site database is $TEST_SITE_DB"

    cd "$(dirname $LOCAL_TEST_ROOT)"
    rm -rf "$(basename $LOCAL_TEST_ROOT)" # If there is already an old site here
    PW=
    if [ -n "$MYSQL_PASSWORD" ]
    then
      PW=":$MYSQLPASSWORD"
    fi
    $MSG drush $TEST_SITE_ALIAS core-quick-drupal --core=drupal-8.0.x --db-url="mysql://$MYSQL_USER$PW@localhost/$TEST_SITE_DB" "$(basename $LOCAL_TEST_ROOT)" --no-server --browser=0
    drush $TEST_SITE_ALIAS core-quick-drupal --core=drupal-8.0.x --db-url="mysql://$MYSQL_USER$PW@localhost/$TEST_SITE_DB" "$(basename $LOCAL_TEST_ROOT)" --no-server --browser=0
    check "Created a new local 'test' Drupal site $TEST_SITE_ALIAS" "Could not create $TEST_SITE_ALIAS using drush qd"
  fi

  # 2. Touch up the configuration directories in settings.php and export configuration

  CONFIG_RANDOM="$(base64 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 75 | head -n 1)"

  grep -q "sites/default/config_" "$LOCAL_TEST_ROOT/sites/default/settings.php"
  if [ "$?" != "0" ]
  then

    $MSG "Adjust config directories in settings.php file for test site."

    chmod +w "$LOCAL_TEST_ROOT/sites/default"
    chmod +w "$LOCAL_TEST_ROOT/sites/default/settings.php"
    cat << __EOF__ >> "$LOCAL_TEST_ROOT/sites/default/settings.php"

  \$config_directories['active'] = 'sites/default/files/config_$CONFIG_RANDOM/active';
  \$config_directories['staging'] = 'sites/default/config_$CONFIG_RANDOM/staging';
__EOF__

    mkdir -p "$LOCAL_TEST_ROOT/sites/default/files/config_$CONFIG_RANDOM/active"
    aborterr "Could not create the active configuration directory for the test site."
    mkdir -p "$LOCAL_TEST_ROOT/sites/default/config_$CONFIG_RANDOM/staging"
    aborterr "Could not create the staging configuration directory for the test site."

    $MSG "Export the configuration for the test site."
    drush $TEST_SITE_ALIAS config-export
    aborterr "Could not export the initial configuration from the test site."
  fi

  # 3. Create a .gitignore file for the test site

  create_gitignore "$LOCAL_TEST_ROOT"

  # 4. Make a git repository for the test site

  $MSG "Create a git repository for the test site."

  cd "$LOCAL_TEST_ROOT"
  git init > /dev/null 2>&1
  aborterr "Could not init the git repository at $LOCAL_TEST_ROOT"
  git add . > /dev/null 2>&1
  aborterr "Could not add the initial set of files to the git repository at $LOCAL_TEST_ROOT"
  git commit -m "Initial commit" > /dev/null 2>&1
  check "Created a git repository for the test site" "Could not create a git repository for the test site."

  # 5. Set up a bare repository to serve as the central repository for both sites

  $MSG "Create a central git repository to use with the dev and test sites."

  GIT_BASE_DIR="$HOME/local/git"
  GIT_DIR="$GIT_BASE_DIR/${LOCAL_SITES_BASENAME}.git"

  rm -rf "$GIT_DIR"
  mkdir -p "$GIT_DIR"
  aborterr "Could not create $GIT_DIR"
  cd "$GIT_DIR"
  git init --bare
  aborterr "Could not create a bare git repository at $GIT_DIR"
  cd "$LOCAL_TEST_ROOT"
  git remote add origin "$GIT_DIR"
  aborterr "Could not add $GIT_DIR as an origin at $LOCAL_TEST_ROOT"
  git push origin master
  check "Created a central git repository for the dev and test sites" "Could not push to the central repository at $GIT_DIR"

  # 6. Check out the code from the repository again for the local "dev" site

  clone_repository "$LOCAL_SITES_BASENAME" "$GIT_DIR" "$LOCAL_DEV_ROOT"

  cd "$LOCAL_DEV_ROOT"

  # 7. Configure your settings.php file

  DEV_SITE_DB="$(echo ${LOCAL_SITES_BASENAME}devdb | sed -e 's/[^a-zA-Z0-9]//g')"
  $VERBOSEMSG "Dev site database is $DEV_SITE_DB"

  if [ ! -f "$LOCAL_DEV_ROOT/sites/default/settings.php" ]
  then
    cp "$LOCAL_TEST_ROOT/sites/default/settings.php" "$LOCAL_DEV_ROOT/sites/default/settings.php"
  fi

  grep -q "$DEV_SITE_DB" "$LOCAL_DEV_ROOT/sites/default/settings.php"
  if [ "$?" != "0" ]
  then

    cat << __EOF__ >> "$LOCAL_DEV_ROOT/sites/default/settings.php"

    \$config['system.site']['name'] = 'Local $LOCAL_SITES_BASENAME site';

    \$databases['default']['default'] = array (
      'database' => '${DEV_SITE_DB}',
      'username' => '$MYSQL_USER',
      'password' => '$MYSQL_PASSWORD',
      'prefix' => '',
      'host' => 'localhost',
      'port' => '',
      'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
      'driver' => 'mysql',
    );
__EOF__

    $MSG Create database for dev copy of $LOCAL_SITES_BASENAME
    drush $DEV_SITE_ALIAS sql-create
    aborterr
    COPY_DATABASE=true
  fi

  # 8. Copy the database from "test" site to the "dev" site

  if $COPY_DATABASE
  then
    $MSG "drush sql-sync $TEST_SITE_ALIAS $DEV_SITE_ALIAS"
    drush sql-sync $TEST_SITE_ALIAS $DEV_SITE_ALIAS
    check "Copied the database of $TEST_SITE_ALIAS to $DEV_SITE_ALIAS" "Drush sql-sync $TEST_SITE_ALIAS $DEV_SITE_ALIAS failed."
    drush $DEV_SITE_ALIAS cr
  fi
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  C L O N E   A   P A N T H E O N    D R U P A L   S I T E
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Clone from Pantheon to local.
#
if [ -n "$PANTHEON_SITE" ]
then
  $VERBOSEMSG "Pantheon site is $PANTHEON_SITE"

  # Insure that we are logged in
  WHOAMI=$(terminus auth whoami)
  aborterr "Could not use terminus to determine logged-in status."
  if [ "$WHOAMI" == "You are not logged in." ]
  then
    $ERROR "Please login first with \`terminus auth login\`" >&2
    exit 1
  fi

  # Check our connection mode
  CONNECTION_MODE=$(terminus site connection-info --site="$PANTHEON_SITE" --env="$SITE_ENV")
  aborterr "Could not use terminus to determine the connection mode of the $SITE_ENV environment of the Pantheon site '$PANTHEON_SITE'."
  $DEBUGMSG "$CONNECTION_MODE"
  echo "$CONNECTION_MODE" | grep -qi git
  if [ "$?" != "0" ]
  then
    if $FORCE
    then
      terminus site connection-mode --site="$PANTHEON_SITE" --env="$SITE_ENV" --set=git
      aborterr "Could not use terminus to set the connection mode of the $SITE_ENV environment of the Pantheon site '$PANTHEON_SITE' to 'git'."
      CONNECTION_MODE=$(terminus site connection-mode --site="$PANTHEON_SITE" --env="$SITE_ENV")
      aborterr "Could not use terminus to determine the connection mode of the $SITE_ENV environment of the Pantheon site '$PANTHEON_SITE'."
    else
      $ERROR "The site $PANTHEON_SITE is not in 'git' mode.  Fix this via 'terminus site connection-mode --site=\"$PANTHEON_SITE\" --env=\"$SITE_ENV\" --set=git', or run again with --force to force-switch to 'git' mode." >&2
      exit 1
    fi
  fi
  $DEBUGMSG "$CONNECTION_MODE"

  # Record some basic information
  UUID=$(terminus site info --site="$PANTHEON_SITE" --field=id)
  aborterr "Could not use terminus to determine the site UUID for the Pantheon site '$PANTHEON_SITE'."
  $DEBUGMSG "UUID is $UUID"

  REPO="ssh://codeserver.dev.$UUID@codeserver.dev.$UUID.drush.in:2222/~/repository.git"
  $DEBUGMSG "Repository is $REPO"

  LOCAL_ROOT="$BASE_DIR/$PANTHEON_SITE"
  $VERBOSEMSG "Local root is $LOCAL_ROOT"

  DEV_SITE_ALIAS="@local.$PANTHEON_SITE"
  $VERBOSEMSG "Local site alias is $DEV_SITE_ALIAS"

  TEST_SITE_ALIAS="@pantheon.$PANTHEON_SITE.dev"
  $VERBOSEMSG "Pantheon site alias is $TEST_SITE_ALIAS"

  #
  # Create a local copy of the Pantheon site.
  #
  # The numbers in the comments below correspond to the
  # steps in the manual install instructions in INSTALL.md
  #

  # 1. Make sure that your Pantheon Aliases are up-to-date:

  terminus sites aliases
  check "Updated Drush aliases for Pantheon sites" "Could not update Drush aliases using Terminus."

  # 2. Make an alias for your local site.

  create_local_alias "$PANTHEON_SITE" "$LOCAL_ROOT" "localhost:$PORT"

  # 3. Check out the code for the Pantheon site.

  clone_repository "$PANTHEON_SITE" "$REPO" "$LOCAL_ROOT"

  cd "$LOCAL_ROOT"

  # 4. Set up your .gitignore file

  create_gitignore "$LOCAL_ROOT"

  # 5. Configure your settings.php file
  # 6. Define local configuration values in your settings.local.php file

  configure_settings_php "$PANTHEON_SITE" "$LOCAL_ROOT"

  # 7. Copy the database from Pantheon to the local site

  if $COPY_DATABASE
  then
    SQL_DUMP="/tmp/$PANTHEON_SITE.sql"
    SQL_DUMP_GZ="/tmp/$PANTHEON_SITE.sql.gz"
    rm -f "$SQL_DUMP" "$SQL_DUMP_GZ"
    $MSG "drush sql-sync $TEST_SITE_ALIAS $DEV_SITE_ALIAS"
    drush sql-sync $TEST_SITE_ALIAS $DEV_SITE_ALIAS --target-dump="$SQL_DUMP_GZ"
    check "Copied the database of the site '$PANTHEON_SITE'" "Drush sql-sync failed."
    drush $DEV_SITE_ALIAS cr
  fi

  # 8. Export the configuration files if they have never been exported before.

  # If we have never used the configuration tools before, then
  # our configuration staging directory will be empty.  In that
  # instance, we should export the current configuration and commit it.
  if [ ! -f "$LOCAL_ROOT/sites/default/config/system.site.yml" ]
  then
    $MSG "Export initial configuration for $DEV_SITE_ALIAS"
    drush $DEV_SITE_ALIAS config-export
    check "Exported the configuration for '$DEV_SITE_ALIAS'" "Could not make an initial export of the configuration directory on '$DEV_SITE_ALIAS'."
    (
      cd "$LOCAL_ROOT/sites/default/config"
      git add .
      git commit -m "Initial export of configuration."
      aborterr "Could not commit the configuration directory for '$DEV_SITE_ALIAS'."
      git push origin master
      aborterr "Could not push the configuration directory back to the central git repository."
    )
    IMPORT_CONFIGURATION=false
  fi

  # In the case of a --revert, import the configuration again.
  if $IMPORT_CONFIGURATION
  then
    $MSG "Re-import configuration for $DEV_SITE_ALIAS"
    drush $DEV_SITE_ALIAS config-import
    aborterr "Could not import the configuration files to $DEV_SITE_ALIAS."
  fi

fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  F I N I S H   U P
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo
echo "------------------------------------------------------------------------"
echo

if [ 0 == "${#ACCOMPLISHMENTS[@]}" ]
then
  echo "Nothing to do here."
else
  echo "Congratulations!  This script successfully did the following things:"
  echo
  for a in "${ACCOMPLISHMENTS[@]}"
  do
    echo " - $a"
  done
fi

echo

if [ -n "$TEST_SITE_ALIAS" ]
then

  echo "To continue, follow the instructions below."
  echo
  echo "Open another terminal, and run the local dev site using the php"
  echo "built-in webserver:"
  echo
  echo "    drush $DEV_SITE_ALIAS rs /"
  echo
  echo "This will open a web browser and log you in to the local site as"
  echo "the administrator (uid 0)."
  echo

  if [ -n "$PANTHEON_SITE" ]
  then

    echo "Next, open your Pantheon dashboard in another browser window, and"
    echo "visit the development site for $PANTHEON_SITE."

  else

    echo "Next, open another terminal window, and run the local test site"
    echo "using the php built-in webserver:"
    echo
    echo "    drush $TEST_SITE_ALIAS rs /"

  fi

  echo
  echo "Make some configuration changes in each copy of the site.  To merge"
  echo "your configuration changes from the test site ($TEST_SITE_ALIAS) into"
  echo "the dev site ($DEV_SITE_ALIAS), run:"
  echo
  echo "    drush $DEV_SITE_ALIAS config-merge $TEST_SITE_ALIAS"
  echo
  echo "As an experiment, try changing the site slogan on the local site,"
  echo "and move the search block to the header region on the other site."
  echo "Then, merge the configuration changes from both sites together"
  echo "using the command above.  When config-merge completes, you should"
  echo "find that the local site has both the new site slogan, and the"
  echo "search block should be in the header.  The test site won't"
  echo "get the updated configuration changes until you deploy them."
  echo

  if [ -n "$PANTHEON_SITE" ]
  then

    echo "To deploy changes to the Pantheon site, commit them to the git"
    echo "repository (config-merge will do this step), push it to the"
    echo "central repository (git push origin master), and then import the"
    echo "configuration changes with:"
    echo
    echo "    drush $TEST_SITE_ALIAS config-import"

  else

    echo "To deploy configuration changes from the dev site ($DEV_SITE_ALIAS)"
    echo "to the test site ($TEST_SITE_ALIAS), run:"
    echo
    echo "    drush $DEV_SITE_ALIAS exec git push"
    echo "    drush $TEST_SITE_ALIAS exec git pull"
    echo "    drush $TEST_SITE_ALIAS config-import"

  fi

else

  echo "To create some sites to work with, run this script again with the"
  echo "following arguments:"
  echo
  echo "    ./bin/quickstart --create-local-sites foo"
  echo
  echo "This will create a pair of sites, @local.foo.dev and @local.foo.test."
  echo
  echo "To work with a Pantheon site instead, run:"
  echo
  echo "   ./bin/quickstart sitename [install-path]"
  echo
  echo "This will create @local.sitename from an existing Pantheon site"
  echo "@pantheon.sitename.dev.  Make sure that your Pantheon site is"
  echo "using Drupal 8!  To spin up a free Drupal 8 testing site, visit the"
  echo "following URL:"
  echo
  echo "   https://dashboard.pantheon.io/products/drupal8/spinup"

fi

echo

if $MODIFIED_BASHRC
then
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!!!"
  echo "!!! IMPORTANT: To use the components installed by this script,"
  echo "!!!            type \`source ~/.bashrc\`"
  echo "!!!"
  echo "!!! Repeat in every open terminal."
  echo "!!!"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo
fi

